---                                                                                          layout: post                                                                                 title: "2020/10/09 Blog 5"                                                                   date: 2020-10-09 20:58:31 -0700
categories: Senior-Design
---

<style>                                                                                      body{ background-color: #e6e6ff; }
main { background-color: white; }
pre, code{
    color: black;
    background-color: #e6e6ff;
    padding: 2px;
    padding-right: 7px;                                                                       white-space: pre-wrap;                                             
    white-space: -moz-pre-wrap;                     
    white-space: -pre-wrap;
    white-space: -o-pre-wrap;
    word-wrap: break-word;
}
</style>

<body>
<main role="main">

<h2><strong>Scripting</strong></h2>

<p>
In my last blog, I talked about user management, but today, I will be talking about another important aspect of being a system administrator: automation, package management, and scripting. The script I have created is done in bash. The purpose of this script is to create a fresh environment for someone else. Furthermore, it can also be used in case of an emergency such as suffering from a system crash - I could reuse the environment I have replicated as a backup. I will be using "Blog5.sh" as an example to use an apache2 server where the user just needs to run the program without any other interaction.
</p>

<h2><strong>Blog5.sh</strong></h2>

<p>
This section is to set up an environment with the packages installed and updated as root with the <pre>apt-get update && apt-get install -y sudo</pre> command. The <pre>unminimize</pre> command will install the standard Ubuntu Server packages if you want to convert a Minimal instance to a standard Server environment for interactive use. After the unminimize command, we will be creating a pre-defined user "asd12345". </p>

<p>
<a href="https://helloitskayc.github.io/senior-design/2020/10/02/blog-4.html" target="_blank">Click here to refer to my last blog about user management</a>
</p>


<h3><strong>Environment Setup</strong></h3>

<pre>
#!/bin/bash

apt-get update && apt-get install -y sudo;
unminimize;
adduser asd12345
usermod -aG sudo asd12345
mkdir -p /home/asd12345/CIT480/blog5
cd /home/asd12345/CIT480/blog5
apt-get install -y git curl less vim openssh-client
echo "export NAME=\"asd12345\"" >> /home/asd12345/.bashrc
echo "export USER=\"Kevin Chung\"" >> /home/asd12345/.bashrc
echo "export EMAIL=\"asd12345@gmail.com\"" >> /home/asd12345/.bashrc
git config --global user.email "$EMAIL"
git config --global user.name "$NAME"
</pre>

<h3><strong>Apache Setup</strong></h3>

<p>
After setting the environment setup, we install and update apache2. When installing a Apache2, a directory with its files is contained in the folder /etc directory. We'll be copying a file with the <b>cp</b> command which is used like this <pre>cp [OPTION] Source Destination</pre>. We will be copying the source file <b>./000-default.conf</b> to the destination <b>./my_site.conf</b>. The command <pre>a2dissite</pre> disables a site by removing symlinks which I have removed from 000-default. After I removed the symlink from the default site, I also remove the default file, index.html, and <pre>printenv</pre> to copy my current environment with the <b>my_site.conf</b> file into the var/www/html directory, replacing index.html. Opposite of a2dissite, <pre>a2ensite</pre> is a script that enables the specified site. Once I input this command, I run the apache2 and my_site will be loaded up onto the apache2 server.
</p>

<pre>
apt-get update && apt-get install apache2 -y
cd /etc/apache2/sites-available
cp ./000-default.conf ./my_site.conf
a2dissite 000-default

cd /home/asd12345/var/www/html
rm index.html
printenv > /home/asd12345/index.html
mv /home/asd12345/index.html	
a2ensite my_site
service apache2 start
</pre>

</main>
</body>
